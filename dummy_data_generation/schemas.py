from datetime import datetime

yes_no_choice = ["Yes", "No"]
yes_no_none_choice = ["Yes", "No", None]
yes_no_prefer_not_to_say = ["Yes", "No", "Prefer not to say"]
yes_no_unknown_choice = ["Yes", "No", "Don't know", None]
people_count = ["0", "1 to 5", "6 to 10", "11 to 20", "21 or more", "Don't know", "Prefer not to say", None]
times_count = ["1", "2", "3", "4", "5", "6", "7 times or more", "Don't know", "None", "Prefer not to say", None]
void_reasons = [
    "Leaked sample",
    "Low VTM/dry tube",
    "Multiple swabs",
    "No swab",
    "Empty or Insufficient volume",
    "Leaked",
    "Unused Kits",
    "Delay due to mis-delivery",
    "No LP5 tube",
    "No LP5",
]
consolidation_points = [
    "box_empty",
    "sample_leaked",
    "sample_uncompleted",
    "kpa_overpacked_different_ref_different_type",
    "kpa_overpacked",
    "kpa_overpacked_different_ref_same_type",
    "sample_mismatched",
    "sample_bagged_zip",
    "sample_unbagged",
    "sample_unbagged_no_kpa",
    "box_multipacked",
    "tube_carrier_unbagged",
    "tube_carrier_unbagged_unboxed",
    "kpa_unboxed",
    "kpa_unscanned",
    "exception_undefined",
]
household_been_somewhere = [
    "No I haven't, but someone else in my house has",
    "Yes, I have",
    "No, one one in my household has",
    None,
]
countries = (
    "Afghanistan",
    "Albania",
    "Algeria",
    "Andorra",
    "Angola",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Brazil",
    "Brunei",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Cape Verde",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Colombia",
    "Comoros",
    "Congo",
    "Congo (Democratic Republic)",
    "Costa Rica",
    "Croatia",
    "Cuba",
    "Cyprus",
    "Czechia",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Dominican Republic",
    "East Timor",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Elsewhere",
    "Equatorial Guinea",
    "Eritrea",
    "Estonia",
    "Eswatini",
    "Ethiopia",
    "Fiji",
    "Finland",
    "France",
    "Gabon",
    "Georgia",
    "Germany",
    "Ghana",
    "Greece",
    "Grenada",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Honduras",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Ireland",
    "Israel",
    "Italy",
    "Ivory Coast",
    "Jamaica",
    "Japan",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Kosovo",
    "Kuwait",
    "Kyrgyzstan",
    "Laos",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Libya",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Mauritania",
    "Mauritius",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Morocco",
    "Mozambique",
    "Myanmar (Burma)",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "North Korea",
    "North Macedonia",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua New Guinea",
    "Paraguay",
    "Peru",
    "Philippines",
    "Poland",
    "Portugal",
    "Qatar",
    "Romania",
    "Russia",
    "Rwanda",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia",
    "Slovenia",
    "Solomon Islands",
    "Somalia",
    "South Africa",
    "South Korea",
    "South Sudan",
    "Spain",
    "Sri Lanka",
    "St Kitts and Nevis",
    "St Lucia",
    "St Vincent",
    "Sudan",
    "Suriname",
    "Sweden",
    "Switzerland",
    "Syria",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "The Bahamas",
    "The Gambia",
    "Togo",
    "Tonga",
    "Trinidad and Tobago",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Vatican City",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe",
    None,
)

start_date_list = datetime(2022, 1, 1)
end_date_list = datetime(2022, 1, 10)

symptoms_list_1 = [
    "Runny nose or sneezing",
    "Loss of smell",
    "Loss of taste",
    "Sore throat",
    "Cough",
    "Shortness of breath",
    "Noisy breathing or wheezing",
    "Abdominal pain",
    "Nausea or vomiting",
    "Diarrhoea",
    "Loss of appetite or eating less than usual",
]
symptoms_list_2 = [
    "Headache",
    "Muscle ache",
    "Weakness or tiredness",
    "Fever including high temperature",
    "More trouble sleeping than usual",
    "Memory loss or confusion",
    "Difficulty concentrating",
    "Worry or anxiety",
    "Low mood or not enjoying anything",
]

long_covid_symptoms_list_1 = [
    "Headache",
    "Problems with eyesight or sore eyes",
    "Tinnitus or problems hearing",
    "Ear pain",
    "Runny nose of sneezing",
    "Nasal congestion",
    "Sore throat",
    "Cough",
    "Shortness of breath",
    "Noisy breathing or wheezing",
    "Chest pain",
    "Palpitations or heart rate pounding or beating irregularly",
]

long_covid_symptoms_list_2 = [
    "Nausea or vomiting",
    "Abdominal pain",
    "Diarrhoea",
    "Loss of appetite or eating less than usual",
    "Muscle ache",
    "Joint pain",
    "Mobility problems",
    "Loss of taste",
    "Loss of smell",
    "Memory loss or confusion",
    "Difficulty concentrating",
]

long_covid_symptoms_list_3 = [
    "More trouble sleeping than usual",
    "Worry or anxiety",
    "Low mood or not enjoying anything",
    "Weakness or tiredness",
    "Fever including high temperature",
    "General pain",
    "Vertigo or dizziness",
    "Allergies or intolerances",
    "Hair loss",
    "Pins and needles or numbness",
    "Skin rashes or itchy skin",
]

infections = [
    "COVID-19",
    "Flu",
    "Another type of respiratory infection",
    "Do not know the type",
]


# List Variables unique for CISD
type_of_vaccination = [
    "Pfizer / BioNTech",
    "Moderna",
    "Oxford / AstraZeneca",
    "Janssen / Johnson&Johnson",
    "Novavax",
    "Sinovac",
    "Sputnik",
    "Valneva",
    "Sinopharm",
    "From a research study/trial",
    "Another vaccine please specify",
    "I don't know the type",
    "Or Another vaccine please specify",
    "I do not know the type",
    "Or do you not know which one you had?",
    None,
]

self_isolating_reasons = [
    "I have or have had symptoms of COVID-19 or a positive test",  # noqa: E501, E261
    "I haven't had any symptoms but I live with someone who has or has had symptoms or a positive test",  # noqa: E501, E261
    "Due to increased risk of getting COVID-19 such as having been in contact with a known case or quarantining after travel abroad",  # noqa: E501, E261
    "Due to reducing my risk of getting COVID-19 such as going into hospital or shielding",  # noqa: E501, E261
]

phm_date_format = "%Y-%m-%d"
phm_datetime_format = "%Y-%m-%dT%H:%M:%S+00:00"
phm_long_datetime_format = "%Y-%m-%dT%H:%M:%S.%f+00:00"

digital_datetime_format = "%Y-%m-%dT%H:%M:%SZ"
digital_date_format = "%Y-%m-%d"


def get_cis_soc_data_description(_):
    option = int(_("custom_random.random_integer", lower=1, upper=2, null_percent=0))
    if option > 1:
        return lambda: {
            "work_main_job_title": _("text.sentence"),
            "work_main_job_role": _("choice", items=[_("text.sentence"), None]),
            "standard_occupational_classification_code": _(
                "choice",
                items=[_("custom_random.random_integer", lower=1000, upper=9999, null_percent=15), "un", "uncodeable"],
            ),
        }
    else:
        return lambda: {
            "job_title": _("text.quote"),
            "main_job_responsibilities": _("choice", items=[_("text.quote"), None]),
            "Gold SOC2010 code": _("custom_random.random_integer", lower=1000, upper=9999, null_percent=0),
            "Source": _("text.quote"),
            "CHU ID": _("custom_random.random_integer", lower=1000, upper=9999, null_percent=0),
        }


def get_nims_data_description(_, participant_ids=[]):
    return lambda: {  # noqa: E731
        "cis_participant_id": _("choice", items=participant_ids + [None]),
        "product_dose_1": _("choice", items=["AstraZeneca", "Pfizer", "Moderna", "unknown", None]),
        "vaccination_date_dose_1": _("datetime.formatted_datetime", fmt="%Y-%m-%d %H:%M:%S.%f", start=2020, end=2021),
        "product_dose_2": _("choice", items=["AstraZeneca", "Pfizer", "Moderna", "unknown", None]),
        "vaccination_date_dose_2": _("datetime.formatted_datetime", fmt="%Y-%m-%d %H:%M:%S.%f", start=2020, end=2021),
        "found_pds": _("custom_random.random_integer", lower=0, upper=1, null_percent=0),
        "pds_conflict": _("custom_random.random_integer", lower=0, upper=1, null_percent=0),
    }


def get_test_participant_data_data_description(_, blood_barcodes, swab_barcodes):
    return lambda: {  # noqa: E731
        "ons_household_id": _("random.custom_code", mask="############", digit="#"),
        "participant_survey_status": _("choice", items=["Active", "Complete", "Withdrawn"]),
        "withdrawn_reason": _(
            "choice",
            items=[
                "Moving Location",
                "No longer wants to take part",
                "No longer convenient",
                "Bad experience with tester/survey",
                "Swab/blood process distressing",
                "Participant does not want to self swab",
                "Too many visits",
                None,
            ],
        ),
        "withdrawn_type": _(
            "choice",
            items=[
                "Withdrawn",
                "Withdrawn - no future linkage",
                "Withdrawn - no future linkage or use of samples",
                None,
            ],
        ),
        "participant_id": _("random.custom_code", mask="DHR-############", digit="#"),  # Also DHRF-##########
        "participant_id_numeric": _("custom_random.random_integer", lower=10000000, upper=99999999, null_percent=0),
        "title": _("choice", items=["Dr.", "Miss.", "Mr.", "Mrs.", "Ms.", "Prof.", None]),
        "first_name": _("person.first_name"),
        "middle_name": _("person.first_name"),
        "last_name": _("person.last_name"),
        "date_of_birth": _("datetime.formatted_datetime", start=1980, end=2021, fmt=digital_datetime_format),
        "sex": _("choice", items=["Female", "Male"]),
        "ethnic_group": _(
            "choice",
            items=[
                "Asian or Asian British",
                "Black or African or Caribbean or Black British",
                "Mixed/Multiple Ethnic Groups",
                "Other Ethnic Group",
                "White",
            ],
        ),
        "ethnicity": _(
            "choice",
            items=[
                "English| Welsh| Scottish| Northern Irish or British",
                "Irish",
                "Gypsy or Irish Traveller",
                "Any other white",
                "White and Black Caribbean",
                "White and Black African",
                "White and Asian",
                "Any other Mixed/Multiple background",
                "Indian",
                "Pakistani",
                "Bangladeshi",
                "Chinese",
                "Any other Asian background",
                "African",
                "Caribbean",
                "Any other Black",
                "African",
                "Caribbean or Black British",
                "Any other ethnic group",
                "Arab",
            ],
        ),
        "ethnicity_other": _("text.sentence"),
        "original_invite_cohort": _("text.sentence"),
        "consent_contact_extra_research_yn": _("choice", items=yes_no_none_choice),
        "consent_use_of_surplus_blood_samples_yn": _("choice", items=yes_no_none_choice),
        "consent_blood_samples_if_positive_yn": _("choice", items=yes_no_none_choice),
        "existing_participant_digital_opt_in_status": _(
            "choice",
            items=[
                "Participant Opted In",
                "Participant Opted Out",
                None,
            ],
        ),
        "existing_participant_digital_opt_in_datetime": _(
            "datetime.formatted_datetime",
            start=2020,
            end=2022,
            fmt=digital_datetime_format,
        ),
        "nhs_data_share": _("choice", items=yes_no_none_choice),
        "nhs_share_opt_out_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_date_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "household_invited_to_digital": _("choice", items=yes_no_none_choice),
        "household_digital_enrolment_invited_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "participant_invited_to_digital": _("choice", items=yes_no_none_choice),
        "participant_enrolled_digital": _("choice", items=yes_no_none_choice),
        "participant_digital_enrolment_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "datetime.formatted_datetime",
                    start=2020,
                    end=2022,
                    fmt=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "digital_entry_pack_sent_datetime": _(
            "datetime.formatted_datetime",
            start=2020,
            end=2022,
            fmt=digital_datetime_format,
        ),
        "digital_entry_pack_status": _("text.sentence"),  # TODO Check this doesn't have picklist values
        "existing_participant_digital_opt_in_reminder_1_due_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "existing_participant_digital_opt_in_reminder_1_sent_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "existing_participant_digital_opt_in_reminder_1_status": _(
            "text.sentence"
        ),  # TODO Check this doesn't have picklist values
        "existing_participant_digital_opt_in_reminder_2_due_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "existing_participant_digital_opt_in_reminder_2_sent_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "existing_participant_digital_opt_in_reminder_2_status": _(
            "text.sentence"
        ),  # TODO Check this doesn't have picklist values
        "household_digital_opt_in_invitation_sent": _("choice", items=yes_no_none_choice),
        "household_digital_opt_in_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "household_digital_enrollment_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=digital_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "street": _("text.sentence"),
        "city": _("text.sentence"),
        "county": _("text.sentence"),
        "postcode": _("text.sentence"),
        "household_members_under_2_years": _("choice", items=yes_no_none_choice),
        "infant_1": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_2": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_3": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_4": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_5": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_6": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_7": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "infant_8": _("custom_random.random_integer", lower=1, upper=8, null_percent=0.9),
        "household_members_over_2_and_not_present": _("choice", items=yes_no_none_choice),
        "person_1": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_2": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_3": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_4": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_5": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_6": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_7": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_8": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person_1_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person1_reason_for_not_consenting": _("text.sentence"),
        "person_2_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person2_reason_for_not_consenting": _("text.sentence"),
        "person_3_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person3_reason_for_not_consenting": _("text.sentence"),
        "person_4_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person4_reason_for_not_consenting": _("text.sentence"),
        "person_5_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person5_reason_for_not_consenting": _("text.sentence"),
        "person_6_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person6_reason_for_not_consenting": _("text.sentence"),
        "person_7_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person7_reason_for_not_consenting": _("text.sentence"),
        "person_8_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person8_reason_for_not_consenting": _("text.sentence"),
        "person_9_not_consenting_age": _("custom_random.random_integer", lower=16, upper=100, null_percent=0.9),
        "person9_reason_for_not_consenting": _("text.sentence"),
        "count_of_non_consenting": _("custom_random.random_integer", lower=1, upper=9, null_percent=0.9),
        "participant_digital_type_preference": _("text.sentence"),
        "participant_digital_communication_preference": _("text.sentence"),
        "participant_digital_sample_return_preference": _("text.sentence"),
        "participant_digital_language_preference": _("text.sentence"),
        "participant_digital_study_cohort": _("text.sentence"),
        "participant_digital_voucher_preference": _("text.sentence"),
    }


def get_example_survey_response_data_v1_data_description(_, blood_barcodes, swab_barcodes):
    return lambda: {  # noqa: E731
        "survey_start_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_long_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "survey_completed_datetime": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_datetime_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "ons_household_id": _("random.custom_code", mask="############", digit="#"),
        "participant_id": _("random.custom_code", mask="DHR-############", digit="#"),  # Also DHRF-##########
        "participant_completion_window_id": _("random.custom_code", mask="####", digit="#"),
        "participant_completion_window_start_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_date_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "participant_completion_window_end_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_date_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "work_status_digital": _(
            "choice",
            items=[
                "Employed",
                "In education",
                "Not in paid work. This includes being unemployed or retired or doing voluntary work",
                "Self-employed",
                None,
            ],
        ),
        "work_status_employment": _(
            "choice",
            items=[
                "Currently not working -  for example on sick or other leave such as maternity or paternity for longer than 4 weeks",  # noqa: E501
                "Currently working. This includes if you are on sick or other leave for less than 4 weeks",
                None,
            ],
        ),
        "work_status_unemployment": _(
            "choice",
            items=[
                "Looking for paid work and able to start",
                "Not looking for paid work. This includes looking after the home or family or not wanting a job or being long-term sick or disabled",  # noqa: E501
                "Retired",
                None,
            ],
        ),
        "work_status_education": _(
            "choice",
            items=[
                "A child aged 4 or over at home-school",
                "A child aged 4 or over at school",
                "A child below school age and attending a nursery or pre-school or childminder",
                "A child below school age and not attending a nursery or pre-school or childminder",
                "Attending a college or other further education provider including apprenticeships",
                "Attending university",
                None,
            ],
        ),
        "work_in_additional_paid_employment": _("choice", items=yes_no_prefer_not_to_say),
        "work_main_job_changed": _("choice", items=yes_no_none_choice),
        "work_main_job_title": _("text.sentence"),
        "work_main_job_role": _("text.sentence"),
        "work_sector": _(
            "choice",
            items=[
                "Armed forces",
                "Arts or entertainment or recreation",
                "Civil Service or Local Government",
                "Financial services.This includes insurance",
                "Food production and agriculture. This includes farming",
                "Healthcare",
                "Hospitality - for example hotels or restaurants or cafe",
                "Information technology and communication",
                "Manufacturing or construction",
                "Personal Services - for example hairdressers or tattooists",
                "Retail sector. This includes wholesale",
                "Social Care",
                "Teaching and education",
                "Transport. This includes storage and logistics",
                "Other employment sector please specify",
                None,
            ],
        ),
        "work_sector_other": _("text.sentence"),
        "work_health_care_area": _(
            "choice",
            items=[
                "Another type of healthcare - for example mental health services",
                "Primary care - for example in a GP or dentist",
                "Secondary care - for example in a hospital",
                None,
            ],
        ),
        "work_direct_contact_patients_or_clients": _("choice", items=yes_no_prefer_not_to_say),
        "work_nursing_or_residential_care_home": _("choice", items=yes_no_prefer_not_to_say),
        "work_location": _(
            "choice",
            items=[
                "Both from home and somewhere else",
                "From home meaning in the same grounds or building as your home",
                "Somewhere else meaning not at your home",
                None,
            ],
        ),
        "work_not_from_home_days_per_week": _(
            "choice",
            items=[None, "0", "1", "2", "3", "4", "5", "6", "7"],
        ),
        "education_in_person_days_per_week": _(
            "choice",
            items=[None, "0", "1", "2", "3", "4", "5", "6", "7"],
        ),
        "transport_to_work_or_education": _(
            "choice",
            items=[
                "Bicycle",
                "Bus or minibus or coach",
                "Car or van",
                "Motorbike or scooter or moped",
                "On foot",
                "Taxi or minicab",
                "Train",
                "Underound or Metro or Light Rail or Tram",
                "Other method",
                None,
            ],
        ),
        "ability_to_socially_distance_at_work_or_education": _(
            "choice",
            items=[
                "Difficult to maintain 2 metres apart. But you can usually be at least 1 metre away from other people",
                "Easy to maintain 2 metres apart. It is not a problem to stay this far away from other people",
                "Relatively easy to maintain 2 metres apart. Most of the time you can be 2 meters away from other people",  # noqa: E501
                "Very difficult to be more than 1 metre away. Your work means you are in close contact with others on a regular basis",  # noqa: E501
                None,
            ],
        ),
        "think_have_covid_any_symptom_list_1": _("random.choices", population=symptoms_list_1, k=1),
        "think_have_covid_any_symptom_list_2": _("random.choices", population=symptoms_list_2, k=1),
        "think_have_covid_onset_date": _(
            "discrete_distribution",
            population=[
                _("custom_random.random_date", start=start_date_list, end=end_date_list, format=phm_date_format),
                None,
            ],
            weights=[0.5, 0.5],
        ),
        "swab_taken": _("choice", items=yes_no_none_choice),
        "swab_not_taken_reason": _(
            "choice",
            items=[
                "I am near the end of my testing window and my swab test kit has not arrived",
                "I did not want to take it this month",
                "I tried but could not take it",
                "The swab test kit arrived both damaged and with parts missing",
                "The swab test kit arrived damaged",
                "The swab test kit arrived with parts missing",
                None,
            ],
        ),
        "swab_sample_barcode_correct": _("choice", items=yes_no_none_choice),
        "swab_sample_barcode_user_entered": _("random.custom_code", mask="SWT########", digit="#"),
        "swab_taken_date": _(
            "custom_random.random_date",
            start=start_date_list,
            end=end_date_list,
            format=phm_date_format,
        ),
        "swab_taken_time_hour": _("custom_random.random_integer", lower=0, upper=12, null_percent=0),
        "swab_taken_time_minute": _("choice", items=[0, 15, 30, 45]),
        "swab_taken_am_pm": _("choice", items=["AM", "PM"]),
        "swab_returned": _("choice", items=yes_no_none_choice),
        "swab_return_date": _(
            "custom_random.random_date",
            start=start_date_list,
            end=end_date_list,
            format=phm_date_format,
        ),
        "swab_return_future_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_date_format,
                ),
                None,
            ],
            weights=[0.9, 0.1],
        ),
        "cis_covid_vaccine_received": _("choice", items=yes_no_none_choice),
        "cis_covid_vaccine_type": _("choice", items=type_of_vaccination),
        "cis_covid_vaccine_type_other": _("text.quote"),
        "cis_covid_vaccine_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_date_format,
                ),
                None,
            ],
            weights=[0.5, 0.5],
        ),
        "been_outside_uk": _("choice", items=yes_no_none_choice),
        "been_outside_uk_last_country": _("choice", items=countries),
        "been_outside_uk_last_return_date": _(
            "discrete_distribution",
            population=[
                _("custom_random.random_date", start=start_date_list, end=end_date_list, format=phm_date_format),
                None,
            ],
            weights=[0.5, 0.5],
        ),
        "think_had_covid_onset_date": _(
            "discrete_distribution",
            population=[
                _(
                    "custom_random.random_date",
                    start=start_date_list,
                    end=end_date_list,
                    format=phm_date_format,
                ),
                None,
            ],
            weights=[0.5, 0.5],
        ),
        "think_had_covid_any_symptom_list_1": _("random.choices", population=symptoms_list_1, k=1),
        "think_had_covid_any_symptom_list_2": _("random.choices", population=symptoms_list_2, k=1),
        "face_covering_work_or_education": _(
            "choice",
            items=[
                "I am not going to my place of work or education",
                "I cover my face for other reasons - for example for religious or cultural reasons",
                "Never",
                "Prefer not to say",
                "Yes always",
                "Yes sometimes",
                None,
            ],
        ),
    }


def get_example_survey_response_data_v2_data_description(_, blood_barcodes, swab_barcodes):
    return lambda: {  # noqa: E731
        "Visit_Date_Time": _(
            "custom_random.random_date",
            start=start_date_list,
            end=end_date_list,
            format="%Y-%m-%dT%H:%M:%S.%f",
        )[:-3]
        + "Z",
        "ons_household_id": _("random.custom_code", mask="############", digit="#"),
        "Participant_id": _("random.custom_code", mask="DHR-############", digit="#"),
        "Visit_ID": _(
            "choice",
            items=[
                _("random.custom_code", mask="DVH-##########", digit="#"),
                _("random.custom_code", mask="DHVF-##########", digit="#"),
            ],
        ),
        "Visit Status": _(
            "choice", items=["Completed", "Dispatched", "Household did not attend", "Partially Completed", "Withdrawn"]
        ),
        "Swab_Barcode_1": _(
            "discrete_distribution",
            population=swab_barcodes,
            weights=[1 / len(swab_barcodes)] * len(swab_barcodes),
            null_prop=0.2,
        ),
        # Format:  YYYY-mm-ddTHH:MM:SS.sssZ
        "Date_Time_Samples_Taken": _(
            "discrete_distribution",
            population=[
                _("custom_random.random_date", start=start_date_list, end=end_date_list, format="%Y-%m-%dT%H:%M:%S.%f")[
                    :-3
                ]
                + "Z",
                None,
            ],
            weights=[0.5, 0.5],
        ),
        "What_is_the_title_of_your_main_job": _("text.sentence"),  # free text field, can be null 1 to 73
        "What_do_you_do_in_your_main_job_business": _("text.sentence"),  # free text field, can be null 1 to 333
        "Occupations_sectors_do_you_work_in": _(
            "choice",
            items=[
                "Armed forces",
                "Art or entertainment or recreation",
                "Arts or Entertainment or Recreation",
                "Arts or entertainment or recreation",
                "Civil Service or Local Government",
                "Financial Services (incl. insurance)",
                "Financial services (incl. insurance)",
                "Food Production and agriculture (incl. farming)",
                "Food production and agriculture (incl. farming)",
                "Health care",
                "Hospitality (e.g. hotel or restaurant or cafe)",
                "Information technology and communication",
                "Manufacturing or construction",
                "Other employment sector (specify)",
                "Other occupation sector",
                "Other occupation sector (specify)",
                "Personal Services (e.g. hairdressers or tattooists)",
                "Retail Sector (incl. wholesale)",
                "Retail sector (incl. wholesale)",
                "Social Care",
                "Social care",
                "Teaching and education",
                "Transport (incl. storage and logistic)",
                "Transport (incl. storage and logistics)",
                "Transport (incl. storage or logistic)",
                None,
            ],
        ),
        "occupation_sector_other": _("text.sentence"),  # free text field, can be null 1 to 75
        "Work_in_a_nursing_residential_care_home": _("choice", items=yes_no_none_choice),
        "Do_you_currently_work_in_healthcare": _(
            "choice",
            items=[
                None,
                "Primary care (e.g. GP, dentist)",
                "Secondary care (e.g. hospital)",
                " Other healthcare (e.g. mental health)",
            ],
        ),
        "Direct_contact_patients_clients_resid": _("choice", items=yes_no_none_choice),
        "Have_physical_mental_health_or_illnesses": _("choice", items=yes_no_none_choice),
        "physical_mental_health_or_illness_reduces_activity_ability": _(
            "choice", items=[None, "Not at all", "Yes, a little", "Yes, a lot"]
        ),
        "What_is_your_current_working_status": _(
            "choice",
            items=[
                None,
                "5y and older in full-time education",
                "Employed and currently working (including if on leave or sick leave for less than 4 weeks)",
                "Attending university (including if temporarily absent)"
                "Self-employed and currently working (include if on leave or sick leave for less than 4 weeks)",
            ],
        ),
        "Paid_employment": _("choice", items=yes_no_none_choice),
        "Main_Job_Changed": _("choice", items=yes_no_none_choice),
        "Where_are_you_mainly_working_now": _(
            "choice",
            items=[
                None,
                "Both (work from home and work somewhere else)",
                "From home (in the same grounds or building as your home)",
                "Somewhere else (not at your home)",
                "Somewhere else (not your home)",
            ],
        ),
        "How_often_do_you_work_elsewhere": _(
            "choice",
            items=[None, "0", "1", "2", "3", "4", "5", "6", "7", "Participant Would Not/Could Not Answer", "up to 1"],
        ),
        "How_do_you_get_to_and_from_work_school": _(
            "choice", items=[None, "Bus", "Car or Van", "On foot", "Bicycle", "Other method"]
        ),
        "Can_you_socially_distance_at_work": _(
            "choice",
            items=[
                None,
                "Difficult to maintain 2 meters - but I can usually be at least 1m from other people",
                "Easy to maintain 2m - it is not a problem to stay this far away from other people",
                "Very difficult to be more than 1 meter away as my work means I am in close contact with others on a"
                " regular basis",
            ],
        ),
        "Had_symptoms_in_the_last_7_days": _("choice", items=yes_no_none_choice),
        "Which_symptoms_in_the_last_7_days": _(
            "choice", items=[None, "Fever ", "Muscle ache", "Weakness/tiredness", "Sore  Throat"]
        ),
        "Date_of_first_symptom_onset": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Symptoms_7_Fever": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Muscle_ache_myalgia": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Fatigue_weakness": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Sore_throat": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Cough": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Shortness_of_breath": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Headache": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Nausea_vomiting": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Abdominal_pain": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Diarrhoea": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Loss_of_taste": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Loss_of_smell": _("choice", items=yes_no_none_choice),
        "Symptoms_7_More_trouble_sleeping_than_usual": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Runny_nose_sneezing": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Noisy_breathing_wheezing": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Loss_of_appetite_or_eating_less_than_usual": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Chest_pain": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Palpitations": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Vertigo_dizziness": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Worry_anxiety": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Low_mood_not_enjoying_anything": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Memory_loss_or_confusion": _("choice", items=yes_no_none_choice),
        "Symptoms_7_Difficulty_concentrating": _("choice", items=yes_no_none_choice),
        "Do_you_think_you_have_Covid_Symptoms": _(
            "choice", items=["Yes", "Participant Would Not/Could Not Answer", "No", None]
        ),
        "Face_Covering_or_Mask_outside_of_home": _(
            "choice",
            items=[
                None,
                "My face is already covered for other reasons (e.g. religious or cultural reasons)",
                "No",
                "Participant Would Not/Could Not Answer",
                "Yes at work/school only",
                "Yes in other situations only (including public transport or shops)",
                "Yes in other situations only (including public transport/shops)",
                "Yes usually both at work/school and in other situations",
            ],
        ),
        "Face_Mask_Work_Place": _(
            "choice",
            items=[
                None,
                "My face is already covered for other reasons (e.g. religious or cultural reasons)",
                "Never",
                "Not going to place of work or education",
                "Participant Would Not/Could Not Answer",
                "Yes always",
                "Yes sometimes",
            ],
        ),
        "Face_Mask_Other_Enclosed_Places": _(
            "choice",
            items=[
                None,
                "My face is already covered for other reasons (e.g. religious or cultural reasons)",
                "Never",
                "Not going to other enclosed public spaces or using public transport",
                "Participant Would Not/Could Not Answer",
                "Yes always",
                "Yes sometimes",
            ],
        ),
        "Do_you_think_you_have_had_Covid_19": _("choice", items=yes_no_none_choice),
        "think_had_covid_19_any_symptoms": _("choice", items=yes_no_none_choice),
        "think_had_covid_19_which_symptoms": _("choice", items=[None, _("text.answer")]),
        "Previous_Symptoms_Fever": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Muscle_ache_myalgia": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Fatigue_weakness": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Sore_throat": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Cough": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Shortness_of_breath": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Headache": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Nausea_vomiting": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Abdominal_pain": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Diarrhoea": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Loss_of_taste": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Loss_of_smell": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_More_trouble_sleeping_than_usual": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Runny_nose_sneezing": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Noisy_breathing_wheezing": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Loss_of_appetite_or_eating_less_than_usual": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Chest_pain": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Palpitations": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Vertigo_dizziness": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Worry_anxiety": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Low_mood_not_enjoying_anything": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Memory_loss_or_confusion": _("choice", items=yes_no_none_choice),
        "Previous_Symptoms_Difficulty_concentrating": _("choice", items=yes_no_none_choice),
        "If_yes_Date_of_first_symptoms": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Have_you_had_a_swab_test": _("choice", items=yes_no_none_choice),
        "If_Yes_What_was_result": _(
            "choice",
            items=[
                "All tests failed",
                "One or more negative tests but none positive",
                "One or more negative tests but none were positive",
                "One or more positive test(s)",
                "Waiting for all results",
                None,
            ],
        ),
        "If_positive_Date_of_1st_ve_test": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "If_all_negative_Date_last_test": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Have_you_been_offered_a_vaccination": _("choice", items=yes_no_none_choice),
        "Vaccinated_Against_Covid": _("choice", items=yes_no_none_choice),
        "Type_Of_Vaccination": _(
            "choice",
            items=[
                "Don't know type",
                "From a research study/trial",
                "Janssen/Johnson&Johnson",
                "Moderna",
                "Novavax",
                "Other / specify",
                "Oxford/AstraZeneca",
                "Pfizer/BioNTech",
                "Sinopharm",
                "Sinovac",
                "Sputnik",
                "Valneva",
                None,
            ],
        ),
        "Vaccination_Other": _("text.quote"),
        "Number_Of_Doses": _("choice", items=["1", "2", "3 or more", None]),
        "Date_Of_Vaccination": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Type_Of_Vaccination_1": _(
            "choice",
            items=[
                "Janssen/Johnson&Johnson",
                "Moderna",
                "Don't know type",
                "Oxford/AstraZeneca",
                "Pfizer/BioNTech",
                None,
            ],
        ),
        "Vaccination_Other_1": _("text.quote"),
        "Date_Of_Vaccination_1": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Type_Of_Vaccination_2": _(
            "choice",
            items=[
                "Janssen/Johnson&Johnson",
                "Moderna",
                "Don't know type",
                "Oxford/AstraZeneca",
                "Pfizer/BioNTech",
                None,
            ],
        ),
        "Vaccination_Other_2": _("text.quote"),
        "Date_Of_Vaccination_2": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Type_Of_Vaccination_3": _(
            "choice",
            items=[
                "Janssen/Johnson&Johnson",
                "Moderna",
                "Don't know type",
                "Oxford/AstraZeneca",
                "Pfizer/BioNTech",
                None,
            ],
        ),
        "Vaccination_Other_3": _("text.quote"),
        "Date_Of_Vaccination_3": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Type_Of_Vaccination_4": _(
            "choice",
            items=[
                "Janssen/Johnson&Johnson",
                "Moderna",
                "Don't know type",
                "Oxford/AstraZeneca",
                "Pfizer/BioNTech",
                None,
            ],
        ),
        "Vaccination_Other_4": _("text.quote"),
        "Date_Of_Vaccination_4": _(
            "discrete_distribution",
            population=[_("custom_random.random_date", start=start_date_list, end=end_date_list), None],
            weights=[0.5, 0.5],
        ),
        "Have_you_been_outside_UK_since_April": _("choice", items=yes_no_none_choice),
        "been_outside_uk_last_country": _("choice", items=countries),
        "been_outside_uk_last_date": _(
            "discrete_distribution",
            population=[_("datetime.formatted_datetime", fmt="%d/%m/%Y", start=2020, end=2022), None],
            weights=[0.5, 0.5],
        ),
        "Have_you_been_outside_UK_Lastspoke": _("choice", items=yes_no_none_choice),
    }


def get_test_swab_sample_results_data_description(_, swab_barcodes):
    return lambda: {  # noqa: E731
        "Sample": _(
            "discrete_distribution",
            population=swab_barcodes,
            weights=[1 / len(swab_barcodes)] * len(swab_barcodes),
            null_prop=0.2,
        ),
        "Result": _("choice", items=["Negative", "Positive", "Void"]),
        "Date Tested": _("datetime.formatted_datetime", fmt="%Y-%m-%d %H:%M:%S UTC", start=2018, end=2022),
        "Lab ID": _("choice", items=["GLS"]),
        "testKit": _("choice", items=["rtPCR", None]),
        "CH1-Target": _("choice", items=["ORF1ab", None]),
        "CH1-Result": _("choice", items=["Inconclusive", "Negative", "Positive", "Rejected"]),
        "CH1-Cq": _("float_number", start=10.0, end=40.0, precision=12),
        "CH2-Target": _("choice", items=["N gene", None]),
        "CH2-Result": _("choice", items=["Inconclusive", "Negative", "Positive", "Rejected"]),
        "CH2-Cq": _("float_number", start=10.0, end=40.0, precision=12),
        "CH3-Target": _("choice", items=["S gene", None]),
        "CH3-Result": _("choice", items=["Inconclusive", "Negative", "Positive", "Rejected"]),
        "CH3-Cq": _("float_number", start=10.0, end=40.0, precision=12),
        "CH4-Target": _("choice", items=["S gene", None]),
        "CH4-Result": _("choice", items=["Positive", "Rejected"]),
        "CH4-Cq": _("float_number", start=15.0, end=30.0, precision=12),
        "voidReason": _("choice", items=[None, "reason 1", "reason 2", "reason 3", "reason 4"]),
    }
